name = MooseX-Getopt
author = Stevan Little <stevan@iinteractive.com>
author = Brandon L. Black <blblack@gmail.com>
author = Yuval Kogman <nothingmuch@woobling.org>
author = Ryan D Johnson <ryan@innerfence.com>
author = Drew Taylor <drew@drewtaylor.com>
author = Tomas Doran <bobtfish@bobtfish.net>
author = Florian Ragwitz <rafl@debian.org>
author = Dagfinn Ilmari Mannsåker <ilmari@ilmari.org>
author = Ævar Arnfjörð Bjarmason <avar@cpan.org>
author = Chris Prather <perigrin@cpan.org>
author = Karen Etheridge <ether@cpan.org>
author = Jonathan Swartz <swartz@pobox.com>
license = Perl_5
copyright_holder = Infinity Interactive, Inc

[@FLORA]
dist = MooseX-Getopt
; r/w: gitmo@git.moose.perl.org:MooseX-Getopt.git
; r/o: git://git.moose.perl.org/MooseX-Getopt.git
; web: http://git.shadowcat.co.uk/gitweb/gitweb.cgi?p=gitmo/MooseX-Getopt.git;a=summary
repository_at = gitmo
authority = cpan:STEVAN
auto_prereq = 0

[Prereqs]
Getopt::Long = 2.37
Getopt::Long::Descriptive = 0.081
Moose = 0.56
MooseX::Role::Parameterized = 0

[Prereqs / TestRequires]
Test::Fatal = 0.003
Test::Warn = 0.21
Test::More = 0
Test::Requires = 0.05
Test::Trap = 0
Path::Tiny = 0
Test::NoWarnings = 1.04
Test::Moose = 0
Config::Any::YAML = 0
Scalar::Util = 0

[Prereqs / TestRecommends]
MooseX::ConfigFromFile = 0
MooseX::SimpleConfig = 0.07

[InstallGuide]
[MetaConfig]
[MetaProvides::Package]
[Git::Describe]
[MinimumPerl]

[Test::DistManifest]
[Test::Compile]
[Test::MinimumVersion]
[MetaTests]
[Test::CPAN::Changes]
[Test::ChangesHasContent]
[Test::Pod::LinkCheck]
[Test::Pod::No404s]
[CheckPrereqsIndexed]
[Test::Version]
[Test::CheckDeps]

[Git::Remote::Check]
remote_branch = master

[Git::CheckFor::CorrectBranch]
; waiting for fix on tag formats
;[Git::CheckFor::Fixups]

[Git::Check]
; workaround for [@Git] bug
allow_dirty = NOTHING

; automatically calculate the next version from the last git tag
; override with V=
[Git::NextVersion]

; add the version to Changes
[NextRelease]
:version = 4.300018
format = %-8V  %{yyyy-MM-dd HH:mm:ss ZZZZ}d

; after release, the version in Changes file will be committed
; with a message listing the changes for this release
[Git::Commit]
allow_dirty = Changes
commit_msg = %N-%v%t%n%n%c

; ...and the resulting head commit will be tagged
[Git::Tag]
tag_format = v%v%t
tag_message = v%v%t

; ...and then pushed to the origin repository
[Git::Push]

; ...and installed locally
[InstallRelease]
install_command = cpanm .

; ... and then we do 'dzil clean'
[Clean]
